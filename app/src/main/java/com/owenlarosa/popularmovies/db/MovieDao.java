package com.owenlarosa.popularmovies.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.owenlarosa.popularmovies.db.Movie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE".
*/
public class MovieDao extends AbstractDao<Movie, Long> {

    public static final String TABLENAME = "MOVIE";

    /**
     * Properties of entity Movie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Identifier = new Property(1, Integer.class, "identifier", false, "IDENTIFIER");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property PosterPath = new Property(3, String.class, "posterPath", false, "POSTER_PATH");
        public final static Property ReleaseDate = new Property(4, String.class, "releaseDate", false, "RELEASE_DATE");
        public final static Property Rating = new Property(5, Double.class, "rating", false, "RATING");
        public final static Property Overview = new Property(6, String.class, "overview", false, "OVERVIEW");
    };

    private DaoSession daoSession;


    public MovieDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IDENTIFIER\" INTEGER," + // 1: identifier
                "\"TITLE\" TEXT," + // 2: title
                "\"POSTER_PATH\" TEXT," + // 3: posterPath
                "\"RELEASE_DATE\" TEXT," + // 4: releaseDate
                "\"RATING\" REAL," + // 5: rating
                "\"OVERVIEW\" TEXT);"); // 6: overview
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Movie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindLong(2, identifier);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String posterPath = entity.getPosterPath();
        if (posterPath != null) {
            stmt.bindString(4, posterPath);
        }
 
        String releaseDate = entity.getReleaseDate();
        if (releaseDate != null) {
            stmt.bindString(5, releaseDate);
        }
 
        Double rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(6, rating);
        }
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(7, overview);
        }
    }

    @Override
    protected void attachEntity(Movie entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Movie readEntity(Cursor cursor, int offset) {
        Movie entity = new Movie( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // identifier
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // posterPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // releaseDate
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // rating
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // overview
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Movie entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdentifier(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPosterPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReleaseDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRating(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setOverview(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Movie entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Movie entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
