package com.owenlarosa.popularmovies.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.owenlarosa.popularmovies.db.Trailer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAILER".
*/
public class TrailerDao extends AbstractDao<Trailer, Long> {

    public static final String TABLENAME = "TRAILER";

    /**
     * Properties of entity Trailer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Identifier = new Property(1, String.class, "identifier", false, "IDENTIFIER");
        public final static Property Key = new Property(2, String.class, "key", false, "KEY");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property TrailerId = new Property(4, long.class, "trailerId", false, "TRAILER_ID");
    };

    private Query<Trailer> movie_TrailersQuery;

    public TrailerDao(DaoConfig config) {
        super(config);
    }
    
    public TrailerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAILER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IDENTIFIER\" TEXT," + // 1: identifier
                "\"KEY\" TEXT," + // 2: key
                "\"NAME\" TEXT," + // 3: name
                "\"TRAILER_ID\" INTEGER NOT NULL );"); // 4: trailerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAILER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Trailer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindString(2, identifier);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(3, key);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Trailer readEntity(Cursor cursor, int offset) {
        Trailer entity = new Trailer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // identifier
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // key
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Trailer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdentifier(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Trailer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Trailer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "trailers" to-many relationship of Movie. */
    public List<Trailer> _queryMovie_Trailers(long trailerId) {
        synchronized (this) {
            if (movie_TrailersQuery == null) {
                QueryBuilder<Trailer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TrailerId.eq(null));
                movie_TrailersQuery = queryBuilder.build();
            }
        }
        Query<Trailer> query = movie_TrailersQuery.forCurrentThread();
        query.setParameter(0, trailerId);
        return query.list();
    }

}
